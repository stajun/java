

영어 단어장을 관리하는 프로그램을 만들려고 한다. 
작업을 어떤 순서로 해야할까요??

영어단어, 뜻, 품사, 발음 => 클래스 => Word클래스
영어단어는 중복 가능, 영어단어와 뜻이 중복되면 안된다.
=>Word클래스의 equals()메소드를 오버라이딩하는데, 단어와 뜻을 비교
단어 객체들을 효율적으로 관리하기 위해 컬렉션프레임워크를 써야하는데 영어 단어 순서를 유지하고싶으면 리스트를 이용 => 중복되지 않도록 잘 처리해야한다.

영어 단어장 클래스를 생성
 - 영어 단어들 => ArrayList<Word> list;
 - 영어 단어장 기능들을 멤버 메소드로
  1. 검색 기능
  2. 단어 추가 기능
  3. 단어 삭제 기능
  4. 단어 수정 기능
  5. 단어 출력 기능

지금 학원에서 서울로 가려고 한다.
어떻게 가야할까요?
611을 타고 옥산 -> 옥산 xx번을 타고 시외
823을타고 바로 시외
버스를 타고 시외 버스터미널로 간다.
시외버스 터미널에서 버스를 타고 서울 시외버스터미널로 간다.
변수 
 - 자료형, 변수 선언, 변수명 작성 규칙과 관례
연산자
 - 연산자 종류와 그에 따른 결과
 - 산술연산자 : 값
   - /, %
 - 관계연산자(비교연산자) : 참 거짓
   - == 같다 연산자와 = 대입 연산자 구별
 - 논리연산자 : 참 거짓
   - ~거나 : ||
   - ~고 : &&
   - ~아닌 : !
 - 조건선택연산자 : 값
 - 증감연산자 : 값
   - 전위형과 후위형 구별
   - 잘 못하겠으면 동작을 각각 시켜라
     arr[cnt++] = 0;//이해를 잘 못하겠으면
     arr[cnt] = 0;
     cnt++;
 - 대입연산자 
   - 연산자를 기준으로 오른쪽에 있는 값을 왼쪽에 저장
   - 왼쪽에는 변수가 한개만와야한다.
  수학에서는 x = 1 + 2와 x - 1 = 2 둘다 같은 의미이지만
  프로그래밍언어에서는 
	x=1+2;//가능
	와 
	x-1 = 2;//에러
  전혀 다르다. 
  - 나누기 : 정수 / 정수 => 정수
    자료형변환이 필요
 자료형 변환
  - 자동 : 작은 데이터가 큰데이터로 갈때, 정수가 실수로 갈때
  - 명시적 : 
     - 큰 데이터를 작은데이터로 보낼때(명시적으로 안하면 에러)
     - 실수가 정수로 갈때(명시적으로 안하면 에러)
     - 연산 결과를 실수로 만들 때(나누기):안하면 원하는 결과가 안나옴

조건문
 - 종류 : if, switch
 - ~하면 ...해라 
   ~ : 조건식, ... : 실행문
 - 조건식 : 결과가 참/거짓으로 판별되는 식(논리연산자, 비교연산자)
if(조건식1){
	실행문1;
}else if(조건식2){
	실행문2;
}else{
	실행문3;
}
 - 일반적으로 if문에는 조건식이 필요한데 변수가 오는 경우가 있는데
   이때 이 변수의 자료형은 boolean인 경우이다.
  boolean stop = false;
  if(stop){
	실행문;
  }
switch(변수/식){
case 값1:
	실행문1;
	break;
case 값2:
	실행문2;
	break;
default:
	실행문3;
}
 - 변수의 사용하는 값이 제한적일 때(month예제, 산술연산예제)
 - 식의 값이 제한적일 때(홀짝판별)

반복문
 - 종류 : for문, while문, do while문
 - 반복횟수, 규칙성 찾는 연습을 하자
 - 이중반복문 : 반복문안에 반복문
 - 향상된 for문
   1. 배열이나 컬렉션을 이용할 때
   2. 전체 탐색(배열, 컬렉션) => 수정이나 삭제가 불가능

참조변수
 - 주소를 저장하는 변수
 - 배열, 객체(일반자료형으로 만든 변수가 아닌 변수들)
 - int num1; //참조변수x
 - Integer num2;//참조변수o
 - String str;참조변수o
 - int [] arr;//참조변수o
 - null로 초기화 가능
 - 참조변수는 잘못쓰면 NullPointerException이 발생할 수 있다.

열거타입
 - 자료형에 값을 제한하는 것처럼 사용
enum Season{SPRING, SUMMER, FALL, WINTER}
enum Operator{PLUS,NEGITIVE, MOD, DIV, MUL}

클래스 
 - 하나의 정보를 담기 위해 데이터와 기능을 모아 놓은 것
 - 멤버 변수, 멤버 메소드+getter와 setter, 생성자
 - 생성자
  - 멤버 변수를 초기화 기능
  - 생성자 오버로딩을 통해 여러 생성자를 만들수 있다
  - 생성자는 임의로 호출이 불가능, 객체가 생성될 때 자동으로 호출
  - 생성자는 다른 생성자를 this()를 통해 호출할 수 있다.
 - 오버로딩 : 동일한 이름을 가진 생성자나 메소드가 여러개 있는 것
  - 매개변수의 갯수가 다른 경우
  - 매개변수의 갯수가 같지만 자료형/클래스가 다른 경우
 - 메소드 : (하나의) 기능을 수행 하는 코드들
  - 기능 정리 
  - 리턴타입 : 출력, 기능 수행 완료 후 기능을 호출한 메소드에게 알려줄 정보
  - 매개변수 : 입력, 기능을 수행하기 위해 필요한 정보
  - 재사용성이 높은 메소드를 만들자
  - 코드의 중복을 제거
  - 유지 보수가 쉽도록

 정적(static) 멤버 변수/메소드 : 클래스 멤버 변수/메소드
 멤버 변수/메소드 : 객체 멤버 변수/메소드
  - static 메소드는 static메소드와 static 변수만 호출 가능,
    객체 멤버 메소드와 변수는 호출 불가능
  - 객체 메소드는 static메소드와 변수 호출 가능

상속
 - 코드의 중복 제거
 - 표준으로 제공되는 클래스를 상속하는 경우가 많음
 - 메소드 오버라이딩 : 부모 클래스의 메소드를 재정의
 - 부모의 객체를 나타낸 super
 - final클래스 : 상속할수없는 클래스, 부모가 될수없는 클래스
 - final메소드 : 오버라이딩이 불가능한 메소드
 - extends
 - 클래스 상속에서 부모는 1명
접근제한자
 public(모두) > protected(본인, 자식,패키지) > default(본인, 같은패키지) > private(본인)

추상메소드 : 메소드 구현부가 없는 메소드 => 자식클래스/구현클래스에서 오버라이딩해야하는 메소드

인터페이스 
 - 기능명세서로 기능구현은 안되어있다
 - implements를 이용하여 구현 클래스를 만듬
 - 인터페이스는 여러 인터페이스를 구현할 수 있다.
 - 인터페이스 상속은 부모가 여러명일 수 있다.

예외 처리
 - try ~ catch를 이용 : 예외 발생한 부분에서 바로 처리
 - throw와 throws를 이용 : 예외 발생하면 호출한 메소드에게 예외 처리를 맡김
 - catch()에서 아래있는 예외 클래스는 다른 예외클래스이거나 부모 예외 클래스이어야한다.=>아래있는 예외 클래스는 자식이 있으면 안된다.

모든 클래스의 조상클래스 : Object
 - equals()를 오버라이딩 할 수 있다.
 - toString()을 오버라이딩할수 있다.
 - hashCode()를 오버라이딩할 수 잇다.

String 클래스는 멤버 메소드 종류와 기능을 잘 기억하자
Wrapper클래스 
 - 일반 자료형을 클래스로 만든것
 - 컬렉션프레임워크에서 필요해서
  => 컬렉션프레임워크는 객체를 관리하기 때문에 저장하는 변수가 참조변수이어야 한다.
  => 컬렉션프레임워크에서는 같은 객체를 equals()메소드를 이용하기 때문에 Object클래스를 상속받은 클래스이어야한다.

쓰레드 
 - 동시에 여러 작업을 할 때
 - 마우스를 움직이면서 키보드의 키를 누를 때

쓰레드 생성 방법
 - Runnable 인터페이스를 구현하는 방법
   : 쓰레드 기능을 구현하면서 다른 클래스를 상속 받는 경우
 - Thread 클래스를 상속받는 방법

쓰레드의 우선 순위 설정 방법
 - .setPriority(우선순위) : 우선순위의 숫자가 높을수록 먼저 작업할 확률이 높다. 

쓰레드에서 자원 공유 방법
 - 자원 공유란 동일한 객체(참조변수)를 이용하여 작업하는 경우
 - 자원을 이용하여 작업하는 메소드에 synchronized를 추가하면 해당 작업을 하는 중에는 다른 쓰레드가 사용하지 않고 대기한다.

쓰레드를 종료하는 방법
 - 서브 쓰레드의 멤버변수를 추가하여(플레그) 플레그가 false이면 쓰레드 작업을 유지하고 플레그가 true이면 작업을 정지하도록 한다.

컬렉션 프레임워크
 - 자료를 효율적으로 관리하기 위해 미리 만들어 놓은 클래스 또는 인터페이스

컬렉션 프레임워크 종료
 - 컬렉션(리스트, 셋), 맵

컬렉션 프레임워크에서 중복 판단 여부
 - 객체의 equals()를 이용하여 판별하기 때문에 해당 클래스의 equals()를 오버라이딩 하는 것이 좋다.
 - Integer와 같은 래퍼 클래스나 String 클래스는 equals를 오버라이딩 할 필요없다.

컬렉션의 특징
 - value의 값을 저장

리스트의 특징
 - 중복이 가능, 순서 유지

셋의 특징
 - 중복 불가, 순서 유지 불가

맵의 특징
 - key, value의 두가지 값을 저장
 - key는 중복 불가, value는 중복 가능
 - 반복문 사용 불가
 - 값을 하나씩 꺼내는 작업이 복잡하다













